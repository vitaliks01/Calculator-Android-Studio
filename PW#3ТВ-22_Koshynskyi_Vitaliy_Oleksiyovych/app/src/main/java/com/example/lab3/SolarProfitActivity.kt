package com.example.lab3

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Calculate
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.lab3.ui.theme.Lab3Theme
import kotlin.math.exp
import kotlin.math.pow
import kotlin.math.sqrt

class SolarProfitActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            Lab3Theme { SolarProfitScreen(onBack = { finish() }) }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SolarProfitScreen(onBack: () -> Unit) {
    // –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
    var avgDailyPowerMw by remember { mutableStateOf("") }     // –°–µ—Ä–µ–¥–Ω—å–æ–¥–æ–±–æ–≤–∞ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å (–ú–í—Ç)
    var firstDeviationMw by remember { mutableStateOf("") }    // –ü–µ—Ä—à–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è (–ú–í—Ç)
    var secondDeviationMw by remember { mutableStateOf("") }   // –î—Ä—É–≥–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è (–ú–í—Ç)
    var pricePerKWhUah by remember { mutableStateOf("") }      // –í–∞—Ä—Ç—ñ—Å—Ç—å –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó (–≥—Ä–Ω/–∫–í—Ç¬∑–≥–æ–¥)

    // –í–∏–≤—ñ–¥
    var resultText by remember { mutableStateOf("") }

    // ---- –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
    fun normalPdf(x: Double, mean: Double, sigma: Double): Double {
        val coef = 1.0 / (sigma * sqrt(2 * Math.PI))
        val expo = -((x - mean).pow(2)) / (2 * sigma.pow(2))
        return coef * exp(expo)
    }

    fun integrateTrapezoid(a: Double, b: Double, n: Int, mean: Double, sigma: Double): Double {
        var sum = 0.0
        val h = (b - a) / n
        for (i in 0 until n) {
            val left = a + i * h
            val right = a + (i + 1) * h
            sum += (normalPdf(left, mean, sigma) + normalPdf(right, mean, sigma)) * 0.5 * h
        }
        return sum
    }

    fun compute() {
        val pAvgMw = avgDailyPowerMw.toDoubleOrNull() ?: 0.0
        val sigmaBefore = firstDeviationMw.toDoubleOrNull() ?: 0.0
        val sigmaAfter  = secondDeviationMw.toDoubleOrNull() ?: 0.0
        val priceUah    = pricePerKWhUah.toDoubleOrNull() ?: 0.0

        val a = pAvgMw - sigmaAfter
        val b = pAvgMw + sigmaAfter
        val steps = 1000

        // –ß–∞—Å—Ç–∫–∞ –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ "–±–µ–∑ –≤—ñ–¥—Ö–∏–ª–µ–Ω—å" (–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å) –¥–æ/–ø—ñ—Å–ª—è
        val efficiencyBefore = integrateTrapezoid(a, b, steps, pAvgMw, sigmaBefore)
        val efficiencyAfter  = integrateTrapezoid(a, b, steps, pAvgMw, sigmaAfter)

        // –ï–Ω–µ—Ä–≥—ñ—è —Ç–∞ –≥—Ä–æ—à—ñ (–∫–í—Ç¬∑–≥–æ–¥ = –ú–í—Ç * 1000 * 24)
        val earningsBefore = pAvgMw * 24 * efficiencyBefore * priceUah * 1000
        val penaltiesBefore = pAvgMw * 24 * (1 - efficiencyBefore) * priceUah * 1000

        val earningsAfter = pAvgMw * 24 * efficiencyAfter * priceUah * 1000
        val penaltiesAfter = pAvgMw * 24 * (1 - efficiencyAfter) * priceUah * 1000

        resultText = """
            üìä –†–ï–ó–£–õ–¨–¢–ê–¢

            –°–µ—Ä–µ–¥–Ω—å–æ–¥–æ–±–æ–≤–∞ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å: ${"%.3f".format(pAvgMw)} –ú–í—Ç
            –ü–µ—Ä—à–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: ${"%.3f".format(sigmaBefore)} –ú–í—Ç
            –î—Ä—É–≥–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: ${"%.3f".format(sigmaAfter)} –ú–í—Ç
            –í–∞—Ä—Ç—ñ—Å—Ç—å –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó: ${"%.3f".format(priceUah)} –≥—Ä–Ω/–∫–í—Ç¬∑–≥–æ–¥

            –î–æ –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è:
            ‚Ä¢ –ü—Ä–∏–±—É—Ç–æ–∫: ${"%.2f".format(earningsBefore / 1000)} —Ç–∏—Å. –≥—Ä–Ω/–¥–æ–±—É
            ‚Ä¢ –í–∏—Ä—É—á–∫–∞: ${"%.2f".format((earningsBefore - penaltiesBefore) / 1000)} —Ç–∏—Å. –≥—Ä–Ω/–¥–æ–±—É
            ‚Ä¢ –®—Ç—Ä–∞—Ñ/–≤—Ç—Ä–∞—Ç–∏: ${"%.2f".format(penaltiesBefore / 1000)} —Ç–∏—Å. –≥—Ä–Ω/–¥–æ–±—É

            –ü—ñ—Å–ª—è –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è:
            ‚Ä¢ –ü—Ä–∏–±—É—Ç–æ–∫: ${"%.2f".format(earningsAfter / 1000)} —Ç–∏—Å. –≥—Ä–Ω/–¥–æ–±—É
            ‚Ä¢ –í–∏—Ä—É—á–∫–∞: ${"%.2f".format((earningsAfter - penaltiesAfter) / 1000)} —Ç–∏—Å. –≥—Ä–Ω/–¥–æ–±—É
            ‚Ä¢ –®—Ç—Ä–∞—Ñ/–≤—Ç—Ä–∞—Ç–∏: ${"%.2f".format(penaltiesAfter / 1000)} —Ç–∏—Å. –≥—Ä–Ω/–¥–æ–±—É
        """.trimIndent()
    }

    // ---- UI ----
    Scaffold(
        topBar = {
            CenterAlignedTopAppBar(
                title = { Text("–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏–±—É—Ç–∫—É –°–ï–°", fontWeight = FontWeight.SemiBold) },
                navigationIcon = {
                    IconButton(onClick = onBack) {
                        Icon(Icons.Filled.ArrowBack, contentDescription = "–ù–∞–∑–∞–¥")
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer,
                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer
                )
            )
        }
    ) { inner ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(inner)
                .verticalScroll(rememberScrollState())
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            Text(
                text = "–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:",
                style = MaterialTheme.typography.titleMedium
            )

            OutlinedTextField(
                value = avgDailyPowerMw,
                onValueChange = { avgDailyPowerMw = it },
                label = { Text("–°–µ—Ä–µ–¥–Ω—å–æ–¥–æ–±–æ–≤–∞ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å (–ú–í—Ç)") },
                modifier = Modifier.fillMaxWidth(),
                singleLine = true
            )
            OutlinedTextField(
                value = firstDeviationMw,
                onValueChange = { firstDeviationMw = it },
                label = { Text("–ü–µ—Ä—à–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è (–ú–í—Ç)") },
                modifier = Modifier.fillMaxWidth(),
                singleLine = true
            )
            OutlinedTextField(
                value = secondDeviationMw,
                onValueChange = { secondDeviationMw = it },
                label = { Text("–î—Ä—É–≥–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è (–ú–í—Ç)") },
                modifier = Modifier.fillMaxWidth(),
                singleLine = true
            )
            OutlinedTextField(
                value = pricePerKWhUah,
                onValueChange = { pricePerKWhUah = it },
                label = { Text("–í–∞—Ä—Ç—ñ—Å—Ç—å –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó (–≥—Ä–Ω/–∫–í—Ç¬∑–≥–æ–¥)") },
                modifier = Modifier.fillMaxWidth(),
                singleLine = true
            )

            Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.spacedBy(12.dp)) {
                Button(
                    onClick = { compute() },
                    modifier = Modifier.weight(1f)
                ) {
                    Icon(Icons.Filled.Calculate, contentDescription = null)
                    Spacer(Modifier.width(7.dp))
                    Text("–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏")
                }
                OutlinedButton(
                    onClick = onBack,
                    modifier = Modifier.weight(1f)
                ) { Text("–ù–∞–∑–∞–¥") }
            }

            if (resultText.isNotEmpty()) {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(top = 16.dp),
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.surfaceVariant
                    )
                ) {
                    Text(
                        text = resultText,
                        modifier = Modifier.padding(16.dp),
                        style = MaterialTheme.typography.bodyMedium
                    )
                }
            }

            Spacer(Modifier.height(24.dp))
        }
    }
}

@Preview(showBackground = true)
@Composable
fun SolarProfitPreview() {
    Lab3Theme { SolarProfitScreen(onBack = {}) }
}
